# Task ID: 2
# Title: Initialize Supabase Client in Next.js Application
# Status: done
# Dependencies: None
# Priority: high
# Description: Set up the Supabase client instances (browser and server) within the Next.js application to interact with Supabase services, particularly Auth, using the `@supabase/ssr` package.
# Details:
1. Install Supabase JS library: `npm install @supabase/supabase-js @supabase/ssr`. 2. Create `utils/supabase/client.ts` for browser client: 
```typescript
// utils/supabase/client.ts
import { createBrowserClient } from '@supabase/ssr';

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );
}
```
3. Create `utils/supabase/server.ts` for server-side clients (Server Components, Route Handlers):
```typescript
// utils/supabase/server.ts
import { createServerClient, type CookieOptions } from '@supabase/ssr';
import { cookies } from 'next/headers';

export function createClient() {
  const cookieStore = cookies();
  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) { return cookieStore.get(name)?.value; },
        set(name: string, value: string, options: CookieOptions) { cookieStore.set({ name, value, ...options }); },
        remove(name: string, options: CookieOptions) { cookieStore.delete({ name, ...options }); },
      },
    }
  );
}
```
4. Ensure `NEXT_PUBLIC_SUPABASE_URL` and `NEXT_PUBLIC_SUPABASE_ANON_KEY` are in `.env.local`.

# Test Strategy:
Create a test page that attempts to initialize both clients (conditionally, or one in a server component, one in a client component) and call a basic Supabase function like `auth.getUser()`. Verify no initialization errors.
