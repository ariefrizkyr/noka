# Task ID: 4
# Title: Implement Client-Side Google SSO Logic
# Status: done
# Dependencies: 1, 2, 3
# Priority: high
# Description: Implement the client-side function that initiates the Google OAuth flow using `supabase.auth.signInWithOAuth` when the 'Continue with Google' button is clicked.
# Details:
1. In the client component where `GoogleSignInButton` is used (e.g., `app/login/page.tsx`). 2. Import `createClient` from `utils/supabase/client.ts`. 3. Create a handler function `handleGoogleSignIn`. 4. Call `supabase.auth.signInWithOAuth` with `provider: 'google'` and `options.redirectTo` pointing to `${window.location.origin}/auth/callback`.
```tsx
// Example usage in app/login/page.tsx
'use client';
import { createClient } from '@/utils/supabase/client';
import { GoogleSignInButton } from '@/components/auth/GoogleSignInButton';
import { useState } from 'react';

export default function LoginPage() {
  const supabase = createClient();
  const [isLoading, setIsLoading] = useState(false);
  const [errorMsg, setErrorMsg] = useState<string | null>(null);

  const handleGoogleSignIn = async () => {
    setIsLoading(true);
    setErrorMsg(null);
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/auth/callback`,
      },
    });
    if (error) {
      setErrorMsg(error.message);
      setIsLoading(false);
    }
    // Supabase client handles the redirection to Google.
  };

  return (
    <div>
      <GoogleSignInButton onClick={handleGoogleSignIn} isLoading={isLoading} />
      {errorMsg && <p className="text-red-500">{errorMsg}</p>}
    </div>
  );
}
```

# Test Strategy:
Click the button. Verify redirection to Google's OAuth consent screen. Check browser console for errors. Ensure `redirectTo` is correctly formed.

# Subtasks:
## 1. Implement Basic OAuth Flow with Supabase Client [done]
### Dependencies: None
### Description: Set up the core Google SSO authentication flow using Supabase's signInWithOAuth method
### Details:
Create a function that handles the Google sign-in process using Supabase's client. Implement the signInWithOAuth method with 'google' as the provider. For implicit flow, this will redirect users to Google's consent screen and handle the return to your application with tokens. For PKCE flow, include the redirectTo parameter pointing to your callback route. Ensure the redirect URL is added to your allow list.

## 2. Implement Error Handling and Loading State Management [done]
### Dependencies: 4.1
### Description: Add robust error handling and loading state management to the Google SSO implementation
### Details:
Enhance the basic OAuth implementation by adding loading state indicators during the authentication process. Implement comprehensive error handling for various failure scenarios (network issues, user cancellation, invalid credentials). Create user-friendly error messages and recovery paths. Add appropriate UI feedback to indicate the authentication status to users throughout the process.

