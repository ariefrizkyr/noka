# Task ID: 5
# Title: Create Next.js Route Handler for Auth Callback
# Status: done
# Dependencies: 1, 2
# Priority: high
# Description: Implement the Next.js App Router route handler at `app/auth/callback/route.ts` to exchange the authorization code from Google for a Supabase session.
# Details:
1. Create `app/auth/callback/route.ts`. 2. Use `createClient` from `utils/supabase/server.ts`. 3. In the `GET` handler, retrieve the `code` from search parameters. 4. Call `supabase.auth.exchangeCodeForSession(code)`. 5. Redirect to dashboard (e.g., `/dashboard`) on success, or an error page on failure.
```typescript
// app/auth/callback/route.ts
import { createClient } from '@/utils/supabase/server';
import { NextResponse } from 'next/server';

export async function GET(request: Request) {
  const { searchParams, origin } = new URL(request.url);
  const code = searchParams.get('code');
  const next = searchParams.get('next') ?? '/dashboard'; // Default redirect to dashboard

  if (code) {
    const supabase = createClient();
    const { error } = await supabase.auth.exchangeCodeForSession(code);
    if (!error) {
      return NextResponse.redirect(`${origin}${next}`);
    }
    console.error('Auth callback error:', error.message);
  }

  // Redirect to an error page if code is missing or exchange fails
  return NextResponse.redirect(`${origin}/auth/auth-code-error`);
}
```

# Test Strategy:
After successful Google authentication, verify this route is hit. Check for session cookies being set by Supabase. Verify redirection to the dashboard or error page.

# Subtasks:
## 1. Implement Basic Route Handler with Code Exchange [done]
### Dependencies: None
### Description: Create the Next.js route handler for the OAuth callback endpoint. Implement the logic to receive the authorization code from the query parameters and exchange it for access and refresh tokens using the Supabase authentication flow.
### Details:
Set up the route handler file in the appropriate Next.js API or app directory. Extract the authorization code from the request, call the Supabase API to exchange the code for tokens, and handle the response.

## 2. Add Error Handling and Redirection Logic [done]
### Dependencies: 5.1
### Description: Enhance the route handler to handle errors during the code exchange process. Implement logic to redirect users to appropriate pages based on success or failure, ensuring a smooth user experience.
### Details:
Check for errors in the token exchange response. If an error occurs, redirect the user to an error page or display a relevant message. On success, redirect the user to the intended destination within the app.

